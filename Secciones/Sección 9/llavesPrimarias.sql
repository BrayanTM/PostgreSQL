--! Llaves primarias (Serial, Identity, Llave compuesta, UUIDs, Secuencias)

--? Serial vs Identity

-- Serial (PostgreSQL antiguo)
create table "users"(
    "user_id" serial primary key,
    "username" varchar(50) not null
);

-- Identity (PostgreSQL moderno)
create table "users2"(
    "user_id" INTEGER generated by DEFAULT as identity primary key,
    "username" varchar(50) not null
);
create table "users3"(
    "user_id" int generated always as identity primary key,
    "username" varchar(50) not null
);
create table "users4"(
    "user_id" int generated always as identity (start with 100 increment by 5) primary key,
    "username" varchar(50) not null
);

--? Llave primaria compuesta
create table "usersDual"(
    "user_id1" int not null,
    "user_id2" int not null,
    primary key ("user_id1", "user_id2")
);

--? UUIDs
CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Extension para generar UUIDs de varias versiones
CREATE EXTENSION IF NOT EXISTS "pgcrypto"; -- Extension para generar UUIDs versión 4 (PostgreSQL 13+)

-- Verifica que ambas extensiones están instaladas antes de ejecutar las funciones
-- gen_random_uuid() requiere pgcrypto, uuid_generate_v4() requiere uuid-ossp

SELECT gen_random_uuid() AS pgcrypto_uuid;

CREATE TABLE "users5" (
    "user_id" UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    "username" VARCHAR(50) NOT NULL
);

--? Secuencias
CREATE SEQUENCE user_seq;
DROP SEQUENCE user_seq;
SELECT currval('user_seq'), nextval('user_seq'), currval('user_seq') AS next_value;

CREATE SEQUENCE IF NOT EXISTS user_seq2 START 1 INCREMENT 1;

CREATE TABLE "users6" (
    "user_id" INT PRIMARY KEY DEFAULT nextval('user_seq'),
    "username" VARCHAR(50) NOT NULL
);

